package flexGSTIMGUIs;

import channel_package.Channel;
import channel_package.DoubleChannel;
import channel_package.SingleChannel;
import constants.Mode;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * This sub-GUI is instantiated by the MainWindow GUI. 
 * Used to change between single channel or dual channel mode.
 * Responsible for populating the channelList with Channel objects.
 * @author elee1
 */
public class SingleDualWindow extends javax.swing.JFrame {
    
    private MainWindow mainWin;
    private List<Channel> channelList;

    /**
     * Creates new form SingleDualWindow. MainWindow passed as argument so that
     * we can send info to it.
     * @param m 
     */
    public SingleDualWindow(MainWindow m) {
        initComponents();
        
        this.mainWin = m;
        this.channelList = m.getChannelList();
        
        //update all the text, comboboxes, buttons to display correct info
        updateTxtButton();
    }
    
    /**
     * Updates all the buttons and text boxes to display proper info
     */
    private void updateTxtButton() {
        
        if(mainWin.getMode()==Mode.SINGLE) {//in single channel mode
            
            //allow double channel option to be pushable
            doubleChanButton.setEnabled(true); 
            singleChanButton.setEnabled(false);
            
            //populate combo boxes w/ single channel options
            populateSingleChannelOptions(selectFirstCG);
            populateSingleChannelOptions(selectSecondCG);
            
            //change labels
            firstCGLabel.setText("Select First Channel");
            secondCGLabel.setText("Select Second Channel");
        }
        
        else {//in dual channel mode
            
            //allow single channel option to be pushable
            singleChanButton.setEnabled(true);
            doubleChanButton.setEnabled(false);
            
            //populate combo boxes
            populateDoubleChannelOptions(selectFirstCG);
            populateDoubleChannelOptions(selectSecondCG);
            
            //change labels
            firstCGLabel.setText("Select First Group");
            secondCGLabel.setText("Select Second Group");
        }
    }
    
    /**
     * Populates a JComboBox with single channel options
     * @param j 
     */
    private void populateSingleChannelOptions(javax.swing.JComboBox<String> j) {
        j.removeAllItems();
        for(int i = 0; i < 4; i++) {
            j.addItem("Channel "+i);
        }
        j.setSelectedIndex(-1);
    }
    
    /** 
     * Populates a JComboBox with dual channel options
     * @param j 
     */
    private void populateDoubleChannelOptions(javax.swing.JComboBox<String> j) {
        j.removeAllItems();
        for(int i = 0; i < 3; i+=2) {
            j.addItem("Channel " + i + " & " + (i+1));
        }
        j.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        singleChanButton = new javax.swing.JButton();
        doubleChanButton = new javax.swing.JButton();
        firstCGLabel = new javax.swing.JLabel();
        secondCGLabel = new javax.swing.JLabel();
        selectFirstCG = new javax.swing.JComboBox<>();
        selectSecondCG = new javax.swing.JComboBox<>();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Single/Dual Mode Settings");

        singleChanButton.setText("Enable Single Channel Mode");
        singleChanButton.setEnabled(false);
        singleChanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleChanButtonActionPerformed(evt);
            }
        });

        doubleChanButton.setText("Enable Dual Channel Mode");
        doubleChanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleChanButtonActionPerformed(evt);
            }
        });

        firstCGLabel.setText("Select First Channel");

        secondCGLabel.setText("Select Second Channel");

        selectFirstCG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFirstCGActionPerformed(evt);
            }
        });

        selectSecondCG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSecondCGActionPerformed(evt);
            }
        });

        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(secondCGLabel)
                            .addComponent(firstCGLabel)
                            .addComponent(singleChanButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectFirstCG, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectSecondCG, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doubleChanButton))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(singleChanButton)
                    .addComponent(doubleChanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstCGLabel)
                    .addComponent(selectFirstCG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondCGLabel)
                    .addComponent(selectSecondCG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(cancel))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Prevent user from making identical channel/group selection
     * @param evt 
     */
    private void selectSecondCGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSecondCGActionPerformed
        int i1 = selectFirstCG.getSelectedIndex();
        int i2 = selectSecondCG.getSelectedIndex();
        if(i1==i2 && i1!=-1){
            JOptionPane.showMessageDialog(null, "Cannot make identical channel selection", "Error", JOptionPane.INFORMATION_MESSAGE);
            selectSecondCG.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_selectSecondCGActionPerformed

    /**
     * Prevent user from making identical channel/group selection
     * @param evt 
     */
    private void selectFirstCGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFirstCGActionPerformed
        int i1 = selectFirstCG.getSelectedIndex();
        int i2 = selectSecondCG.getSelectedIndex();
        if(i1==i2 && i1!=-1){
            JOptionPane.showMessageDialog(null, "Cannot make identical channel selection", "Error", JOptionPane.INFORMATION_MESSAGE);
            selectFirstCG.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_selectFirstCGActionPerformed

    /**
     * User wants to enable single channel mode
     * @param evt 
     */
    private void singleChanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleChanButtonActionPerformed
        
        //this should only be possible if program is in double channel mode
        if(mainWin.getMode()==Mode.DUAL){
            
            //set to Single Channel Mode
            mainWin.setMode(Mode.SINGLE);
           
            //update all the text boxes + buttons
            updateTxtButton();
        }
    }//GEN-LAST:event_singleChanButtonActionPerformed

    /**
     * User wants to enable double channel mode
     * @param evt 
     */
    private void doubleChanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleChanButtonActionPerformed
        
        //this should only be possible if program is in single channel mode
        if(mainWin.getMode()==Mode.SINGLE){
            
            //set to Dual Channel mode
            mainWin.setMode(Mode.DUAL);
            
            //update all the text boxes + buttons
            updateTxtButton();
        }
        
        
    }//GEN-LAST:event_doubleChanButtonActionPerformed

    /** 
     * User pressed "OK" button, channelList should be updated with fresh channel selections.
     * @param evt 
     */
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        
        this.channelList.clear(); //reset 
        
        int i1 = selectFirstCG.getSelectedIndex();
        int i2 = selectSecondCG.getSelectedIndex();
        
        //check that user made two selections
        if(i1==-1 || i2==-1) {
            JOptionPane.showMessageDialog(null, 
                    "Need to make two selections.", 
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        if(mainWin.getMode()==Mode.SINGLE) {//single channel mode is enabled
            //create SINGLE channel objects with default values
            this.channelList.add(new SingleChannel(5,150,20,15,i1));
            this.channelList.add(new SingleChannel(5,150,20,15,i2));
        }
        else {//double channel mode is enabled
            //create DOUBLE channel objects with default values
            if(i1==0) {
                this.channelList.add(new DoubleChannel(5,150,20,15,0,1));
                this.channelList.add(new DoubleChannel(5,150,20,15,2,3));
            }
            else {
                this.channelList.add(new DoubleChannel(5,150,20,15,2,3));
                this.channelList.add(new DoubleChannel(5,150,20,15,0,1));
            }
        }
        
        this.dispose();
    }//GEN-LAST:event_okActionPerformed

    /**
     * User pressed "Cancel" button, just dispose of window and don't update anything
     * @param evt 
     */
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton doubleChanButton;
    private javax.swing.JLabel firstCGLabel;
    private javax.swing.JButton ok;
    private javax.swing.JLabel secondCGLabel;
    private javax.swing.JComboBox<String> selectFirstCG;
    private javax.swing.JComboBox<String> selectSecondCG;
    private javax.swing.JButton singleChanButton;
    // End of variables declaration//GEN-END:variables
}
