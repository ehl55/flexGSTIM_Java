package flexGSTIMGUIs;

import javax.swing.JOptionPane;

/**
 * This sub-GUI is instantiated by the MainWindow GUI. 
 * Used to update rest period settings.
 * @author elee1
 */
public class RestSettingsWindow extends javax.swing.JFrame {
    
    private int restPeriod;
    MainWindow mainWin; 

    /**
     * Creates new form RestSettingsWindow. MainWindow is passed as an argument
     * so that we can send info to it.
     * @param m 
     */
    public RestSettingsWindow(MainWindow m) {
        initComponents();
        
        this.mainWin = m;
        this.restPeriod = m.getRest();
        updateRestTxtBox();
    }
    
    /**
     * Update the rest JTextField w/ current rest period info.
     */
    private void updateRestTxtBox() {
        restTextBox.setText(""+restPeriod);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        restLabel = new javax.swing.JLabel();
        restTextBox = new javax.swing.JTextField();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rest Settings");

        restLabel.setText("Rest Period (minutes)");

        restTextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        restTextBox.setText("jTextField1");

        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(restLabel)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(restTextBox))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restLabel)
                    .addComponent(restTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(cancel))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * User pressed "OK" button. Checks that inputted rest period is in range.
     * If not, pops up an error message and user must try again. If so, updates
     * the rest period and disposes of RestSettingsWindow.
     * @param evt 
     */
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
                
        restPeriod = Integer.valueOf(restTextBox.getText());
        
        //check that rest period in range [0sec,99sec]
        if(restPeriod<0 || restPeriod>99) { //if not in range
            JOptionPane.showMessageDialog(null, 
                    "Rest period not in range [0sec, 99sec]", 
                    "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        else {//if in range
            mainWin.setRest(restPeriod); //update mainWindow's rest variable b4 closing
            this.dispose();
        }
    }//GEN-LAST:event_okActionPerformed

    /**
     * User pressed "Cancel" button. Dispose of RestSettingsWindow without saving
     * any changes.
     * @param evt 
     */
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton ok;
    private javax.swing.JLabel restLabel;
    private javax.swing.JTextField restTextBox;
    // End of variables declaration//GEN-END:variables
}
